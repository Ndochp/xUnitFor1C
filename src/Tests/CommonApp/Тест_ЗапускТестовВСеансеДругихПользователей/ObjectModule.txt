Перем	Коллекция_ДанныхАвтоОбъектовПриложения1С;
Перем	ТекущийПользователь;
Перем	УпавшиеТесты;
Перем	КоличествоЗагруженныхТестов;

Перем	ТестовыеДанные;

Перем ЮТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮТест = ЮнитТестирование;
	
	СоздатьНаборРолей();
	СоздатьНаборПользователей();

	ВсеТесты = Новый Массив;
	ДополнитьСписокТестов(ВсеТесты, КаталогЗапускателяТестов());
	
	Возврат ВсеТесты;	
КонецФункции

Функция СоздатьНаборРолей() Экспорт
	НаборРолей = Новый Структура("Роль1,ПраваНеобходимыеДляТестирования", "Роль1", "ПраваНеобходимыеДляТестирования");
	НаборРолей = Новый ФиксированнаяСтруктура(НаборРолей);
	Возврат НаборРолей;
КонецФункции

Функция СоздатьНаборПользователей() Экспорт
	НаборПользователей = Новый Структура("ПользовательПоУмолчанию,Пользователь2", "ТестИмя", "ТестИмя2");
	НаборПользователей = Новый ФиксированнаяСтруктура(НаборПользователей);
	Возврат НаборПользователей;
КонецФункции

Функция ДополнитьСписокТестов(ВсеТесты, КаталогЗапускателяТестов, ПрефиксПредставления = "") Экспорт

	ПутьТестов = КаталогЗапускателяТестов+"Tests\selftests\Тест_ПараметрыТестов.epf"; //TestsShouldFail\ТестПримерСломаногоТеста.epf

	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПриложения = СисИнфо.ВерсияПриложения;
	Суффикс = "";
	Если Найти(Строка(СисИнфо.ТипПлатформы), "Linux")>0 Тогда 
		
		Суффикс = "Linux";
	КонецЕсли;
	
	Настройка = Новый Структура("ИмяМакета,ЗапускатьТолстыйКлиент,ПутьТестов", "СозданиеОдногоПользователяИБ", Истина, ПутьТестов);
	ПараметрыТеста = Новый Структура("ИмяТеста,ПредставлениеТеста,Параметр", "ТестДолжен_ЗапуститьТестыВОтдельномСеансеПользователяЧерезV82_Application"+Суффикс, 
		ПрефиксПредставления + "Протестить в отдельном сеансе пользователя (Обычное приложение)", Настройка);
	ВсеТесты.Добавить(ПараметрыТеста);
	
	Настройка = Новый Структура("ИмяМакета,ЗапускатьТолстыйКлиент,ПутьТестов", "СозданиеОдногоПользователяИБ_УФ", Истина, ПутьТестов);
	ПараметрыТеста = Новый Структура("ИмяТеста,ПредставлениеТеста,Параметр", "ТестДолжен_ЗапуститьТестыВОтдельномСеансеПользователяЧерезV82_Application"+Суффикс, 
		ПрефиксПредставления + "Протестить в отдельном сеансе пользователя (Упр.приложение толстый клиент)", Настройка);
	ВсеТесты.Добавить(ПараметрыТеста);
		
	Настройка = Новый Структура("ИмяМакета,ЗапускатьТолстыйКлиент,ПутьТестов", "СозданиеОдногоПользователяИБ_УФ", Ложь, ПутьТестов);
	ПараметрыТеста = Новый Структура("ИмяТеста,ПредставлениеТеста,Параметр", "ТестДолжен_ЗапуститьТестыВОтдельномСеансеПользователяЧерезV82_Application"+Суффикс, 
		ПрефиксПредставления + "Протестить в отдельном сеансе пользователя (Упр.приложение тонкий клиент)", Настройка);
	ВсеТесты.Добавить(ПараметрыТеста);
	
	ПутьТестов = КаталогЗапускателяТестов+"Tests\CommonApp\тесты_ОткрытиеФормКонфигурации.epf";
	
	Настройка = Новый Структура("ИмяМакета,ЗапускатьТолстыйКлиент,ПутьТестов", "СозданиеНесколькихПользователейИБ", Истина, ПутьТестов);
	ПараметрыТеста = Новый Структура("ИмяТеста,ПредставлениеТеста,Параметр", "ТестДолжен_ЗапуститьТестыОткрытияФормКонфигурации_ВОтдельномСеансеПользователя"+Суффикс, 
		ПрефиксПредставления + "Открытие всех форм конфигурации в 2-х отдельных сеансах разных пользователей (Обычное приложение)", Настройка);
	ВсеТесты.Добавить(ПараметрыТеста);
	
	Настройка = Новый Структура("ИмяМакета,ЗапускатьТолстыйКлиент,ПутьТестов", "СозданиеНесколькихПользователейИБ_УФ", Истина, ПутьТестов);
	ПараметрыТеста = Новый Структура("ИмяТеста,ПредставлениеТеста,Параметр", "ТестДолжен_ЗапуститьТестыОткрытияФормКонфигурации_ВОтдельномСеансеПользователя"+Суффикс, 
		ПрефиксПредставления + "Открытие всех форм конфигурации в 2-х отдельных сеансах разных пользователей (Упр.приложение толстый клиент)", Настройка);
	ВсеТесты.Добавить(ПараметрыТеста);
	
	Настройка = Новый Структура("ИмяМакета,ЗапускатьТолстыйКлиент,ПутьТестов", "СозданиеНесколькихПользователейИБ_УФ", Ложь, ПутьТестов);
	ПараметрыТеста = Новый Структура("ИмяТеста,ПредставлениеТеста,Параметр", "ТестДолжен_ЗапуститьТестыОткрытияФормКонфигурации_ВОтдельномСеансеПользователя"+Суффикс, 
		ПрефиксПредставления + "Открытие всех форм конфигурации в 2-х отдельных сеансах разных пользователей (Упр.приложение тонкий клиент)", Настройка);
	ВсеТесты.Добавить(ПараметрыТеста);
	
	Возврат ВсеТесты;	
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	УпавшиеТесты = Неопределено;
	КоличествоЗагруженныхТестов = 0;
	Коллекция_ДанныхАвтоОбъектовПриложения1С = Новый Массив;
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	Если ТестовыеДанные <> Неопределено Тогда
		ЮТест.УдалитьСозданныеДанные(ТестовыеДанные);
	КонецЕсли; 
	
	УпавшиеТесты = Неопределено;
	Для каждого ДанныеАвтоОбъектаПриложения1С Из Коллекция_ДанныхАвтоОбъектовПриложения1С Цикл
		
		ЗавершитьСеансПользователя(ДанныеАвтоОбъектаПриложения1С.АвтоОбъектПриложения1С, ДанныеАвтоОбъектаПриложения1С.ЗапускательТестов);
		
	КонецЦикла;
	
	Коллекция_ДанныхАвтоОбъектовПриложения1С.Очистить();
	Коллекция_ДанныхАвтоОбъектовПриложения1С = Неопределено;
	ТекущийПользователь = Неопределено;
	ТестовыеДанные = Неопределено;
	КоличествоЗагруженныхТестов = 0;
КонецПроцедуры

Процедура ЗавершитьСеансПользователя(АвтоОбъектПриложения1С, ЗапускательТестов)
	Если ЗапускательТестов <> Неопределено Тогда
		ЗапускательТестов.SetHandlerObject(Неопределено);
		
		ЗапускательТестов = Неопределено;
	КонецЕсли;
	Если АвтоОбъектПриложения1С <> Неопределено Тогда
		АвтоОбъектПриложения1С.ЗавершитьРаботуСистемы(Ложь);
		АвтоОбъектПриложения1С = Неопределено;
	КонецЕсли;
КонецПроцедуры


Процедура ТестДолжен_ЗапуститьТестыВОтдельномСеансеПользователяЧерезV82_Application(Настройка) Экспорт
	ИмяМакета = Настройка.ИмяМакета;
	ЗапускатьТолстыйКлиент = Настройка.ЗапускатьТолстыйКлиент;
	ПутьТестов = Настройка.ПутьТестов;
	
	СтрокаОшибок = "";
	Для каждого КлючЗначение Из НаборРолей Цикл
		ИмяРоли = КлючЗначение.Значение;
		Если Метаданные.Роли.Найти(ИмяРоли) = Неопределено Тогда
			СтрокаОшибок = СтрокаОшибок + "В метаданных нет роли <"+ИмяРоли+">";
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(СтрокаОшибок) Тогда
		ВызватьИсключение "Тест не будет работать в текущей конфигурации"+Символы.ПС+СтрокаОшибок;
	КонецЕсли;
	
	лИмяПользователя = НаборПользователей.ПользовательПоУмолчанию;
	УдалитьПользователяИБ_ЕслиОнСуществует(лИмяПользователя);
	
	ТестовыеДанные = СоздатьТестовыеДанные(ИмяМакета);
	
	юТест.ПроверитьТип(ТестовыеДанные.Пользователь1, "ПользовательИнформационнойБазы");
	
	ТекущийПользователь = ТестовыеДанные.Пользователь1;
	
	ДанныеТестирования = ВыполнитьТестыДляПользователяВОтдельномСеансе(ТекущийПользователь, ПутьТестов, ЗапускатьТолстыйКлиент);
	МассивУпавшихТестов = ДанныеТестирования.МассивУпавшихТестов;
		
	ДанныеТестовПоПользователям = Новый Соответствие;
	ДанныеТестовПоПользователям.Вставить(ТекущийПользователь, ДанныеТестирования);
	
	ПроверитьПрохождениеТестов(ДанныеТестовПоПользователям);
КонецПроцедуры

Процедура ТестДолжен_ЗапуститьТестыОткрытияФормКонфигурации_ВОтдельномСеансеПользователя(Настройка) Экспорт
	ИмяМакета = Настройка.ИмяМакета;
	ЗапускатьТолстыйКлиент = Настройка.ЗапускатьТолстыйКлиент;
	ПутьТестов = Настройка.ПутьТестов;
	
	Для каждого КлючЗначение Из НаборПользователей Цикл
		ИмяПользователя = КлючЗначение.Значение;
		УдалитьПользователяИБ_ЕслиОнСуществует(ИмяПользователя);
	КонецЦикла;
	
	ТестовыеДанные = СоздатьТестовыеДанные(ИмяМакета);
	
	ДанныеТестовПоПользователям = Новый Соответствие;
	Для каждого КлючЗначение Из ТестовыеДанные Цикл
		ТекущийПользователь = КлючЗначение.Значение;
		Если ТипЗнч(ТекущийПользователь) <> Тип("ПользовательИнформационнойБазы") Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеТестирования = ВыполнитьТестыДляПользователяВОтдельномСеансе(ТекущийПользователь, ПутьТестов, ЗапускатьТолстыйКлиент);
		МассивУпавшихТестов = ДанныеТестирования.МассивУпавшихТестов;
		
		Если ДанныеТестирования.КоличествоЗагруженныхТестов <> 0 И МассивУпавшихТестов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ДанныеТестовПоПользователям.Вставить(ТекущийПользователь, ДанныеТестирования);
	КонецЦикла;
	
	ПроверитьПрохождениеТестов(ДанныеТестовПоПользователям);
КонецПроцедуры

Функция ВыполнитьТестыДляПользователяВОтдельномСеансе(ТекущийПользователь, ПутьТестов, ТолстыйКлиент = Истина)
	
	ФайлПутьТестов = Новый Файл(ПутьТестов);
		ЮТест.Проверить(ФайлПутьТестов.Существует(), "Не существует файл/каталог <"+ПутьТестов+">");
	
	УпавшиеТесты = Новый Массив();
	КоличествоЗагруженныхТестов = 0;
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
		
	СтрокаСоединения = СтрокаСоединения + "Usr=""" + ТекущийПользователь.Имя + """;";
		
	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПриложения = СисИнфо.ВерсияПриложения;
	ИдАвтоОбъектаПриложения1С = "";
	Если Лев(ВерсияПриложения, 3) = "8.2" Тогда
		ИдАвтоОбъектаПриложения1С = "V82";
	ИначеЕсли Лев(ВерсияПриложения, 3) = "8.3" Тогда
		ИдАвтоОбъектаПриложения1С = "V83";
	ИначеЕсли Лев(ВерсияПриложения, 3) = "8.4" Тогда
		ИдАвтоОбъектаПриложения1С = "V84";
	Иначе
		ВызватьИсключение "Версию приложению <"+ВерсияПриложения+"> обрабатывать не умеем";
	КонецЕсли;

	Если Не ТолстыйКлиент Тогда
		ИдАвтоОбъектаПриложения1С = ИдАвтоОбъектаПриложения1С + "C";
	КонецЕсли;
	
	ИдАвтоОбъектаПриложения1С = ИдАвтоОбъектаПриложения1С + ".Application";
	
	АвтоОбъектПриложения1С = new COMObject(ИдАвтоОбъектаПриложения1С);
	
	Успешно = АвтоОбъектПриложения1С.connect(СтрокаСоединения);
		ЮТест.Проверить(Успешно, "АвтоОбъектПриложения1С.connect(СтрокаСоединения)");
	АвтоОбъектПриложения1С.Visible = true;
	
	ДанныеАвтоОбъектовПриложения1С = Новый Структура("АвтоОбъектПриложения1С,ЗапускательТестов", АвтоОбъектПриложения1С, Неопределено);
	Коллекция_ДанныхАвтоОбъектовПриложения1С.Добавить(ДанныеАвтоОбъектовПриложения1С);
	
	ПолныйПутьЗапускателяТестов = ПолноеИмяВнешнейОбработкиДляЗапускаТестовЧерезКоманднуюСтрокуПредприятия();
	
	Если ТолстыйКлиент Тогда
		Если ЮТест.ЭтоВнешняяОбработка() Тогда
			ЗапускательТестов = АвтоОбъектПриложения1С.ВнешниеОбработки.Создать(ПолныйПутьЗапускателяТестов, Ложь);
		Иначе
			ЗапускательТестов = АвтоОбъектПриложения1С.Обработки[ИмяЗапускателяТестов()].Создать();
		КонецЕсли;
		
		ЗапускательТестов.ЗапретИспользованияИнформатора = Истина;
		ЗапускательТестов.SetHandlerObject(ЭтотОбъект);
		ЗапускательТестов.OpenBrowserForm();
		
		ЗапускательТестов.LoadAllTests(ПутьТестов);

	Иначе
		
		НашлиОбщийМодуль = Истина;
		Попытка
			xddМодуль = АвтоОбъектПриложения1С.xddКлиент;
		Исключение
			НашлиОбщийМодуль = Ложь;
		КонецПопытки;
			ЮТест.Проверить(НашлиОбщийМодуль, "Для запусков тестов пользователей в тонком клиенте требуется общий модуль xddКлиент");
			
		ИдОбработки_юТест = ИмяЗапускателяТестов();
		
		Если ЮТест.ЭтоВнешняяОбработка() Тогда
			ЗапускательТестов = xddМодуль.ПодключитьНаСервереВнешнююОбработкуОтКлиента(ПолныйПутьЗапускателяТестов, ИдОбработки_юТест);
			ЗапускательТестов = АвтоОбъектПриложения1С.ПолучитьФорму("ВнешняяОбработка."+ИдОбработки_юТест+".Форма.УправляемаяФорма");
		Иначе
			ЗапускательТестов = АвтоОбъектПриложения1С.ПолучитьФорму("Обработка."+ИдОбработки_юТест+".Форма.УправляемаяФорма");
		КонецЕсли;
		
		ЗапускательТестов.Пути.Очистить();
		ЗапускательТестов.Пути.Добавить(ПутьТестов);
		
		ЗапускательТестов.ЗапретИспользованияИнформатора = Истина;
		ЗапускательТестов.SetHandlerObject(ЭтотОбъект);
		ЗапускательТестов.OpenBrowserForm(); //ЗапускательТестов.Открыть();
		
		//ЗапускательТестов.LoadAllTests(ПутьТестов);

	КонецЕсли;
	ДанныеАвтоОбъектовПриложения1С.Вставить("ЗапускательТестов", ЗапускательТестов);
	
	Если КоличествоЗагруженныхТестов <> 0 Тогда
		ЗапускательТестов.RunAllTests();
	КонецЕсли;
	
	Рез = Новый Структура("МассивУпавшихТестов,КоличествоЗагруженныхТестов", УпавшиеТесты, КоличествоЗагруженныхТестов);
	УпавшиеТесты = Неопределено; // чтоб освободить глобальную переменную
	КоличествоЗагруженныхТестов = 0;
	Возврат Рез;
КонецФункции

Процедура ПроверитьПрохождениеТестов(ДанныеТестовПоПользователям)
	ОбщаяСтрокаОписанияУпавшихТестов = ""+Символы.ПС;
	ОбщееКоличествоУпавшихТестов = 0;
	ОбщееКоличествоПользователейУКоторыхНеЗагрузилисьТесты = 0;
	Для каждого КлючЗначение Из ДанныеТестовПоПользователям Цикл
		ТекущийПользователь = КлючЗначение.Ключ;
		
		ДанныеТестирования = КлючЗначение.Значение;
		МассивУпавшихТестов = ДанныеТестирования.МассивУпавшихТестов;
			ЮТест.ПроверитьТип(МассивУпавшихТестов, "Массив", "Пользователь <"+ТекущийПользователь.Имя + ": МассивУпавшихТестов");
			
		СтрокаОписанияУпавшихТестов = ""+Символы.ПС;
		
		КоличествоЗагруженныхТестов = ДанныеТестирования.КоличествоЗагруженныхТестов;
		Если КоличествоЗагруженныхТестов = 0 Тогда
			ОбщееКоличествоПользователейУКоторыхНеЗагрузилисьТесты = ОбщееКоличествоПользователейУКоторыхНеЗагрузилисьТесты + 1;
			ОбщаяСтрокаОписанияУпавшихТестов = ОбщаяСтрокаОписанияУпавшихТестов + "У пользователя <"+ТекущийПользователь.Имя + "> не загрузились тесты!"+
				СтрокаОписанияУпавшихТестов;
				Продолжить;
		КонецЕсли;

		ОбщееКоличествоУпавшихТестов = ОбщееКоличествоУпавшихТестов + МассивУпавшихТестов.Количество();
		Для каждого СтрокаДереваТестов Из МассивУпавшихТестов Цикл
			СтрокаОписанияУпавшихТестов = СтрокаОписанияУпавшихТестов + " "+
				": <" + СтрокаДереваТестов.Имя +">, путь <"+
				СтрокаДереваТестов.ПолныйПуть+">" +Символы.ПС;
		КонецЦикла;
		ОбщаяСтрокаОписанияУпавшихТестов = ОбщаяСтрокаОписанияУпавшихТестов + "У пользователя <"+ТекущийПользователь.Имя + "> упали тесты < "+МассивУпавшихТестов.Количество()+" шт.>:"+
			СтрокаОписанияУпавшихТестов;
	КонецЦикла;
	//Если ОбщееКоличествоПользователейУКоторыхНеЗагрузилисьТесты > 0 Тогда
	//	ВызватьИсключение Символы.ПС+"При тестировании разных сеансов пользователей вообще не удалось загрузить тесты. Всего <"+ОбщееКоличествоПользователейУКоторыхНеЗагрузилисьТесты+" пользователей>:"+Символы.ПС+
	//		ОбщаяСтрокаОписанияУпавшихТестов;
	//КонецЕсли;
	Если ОбщееКоличествоУпавшихТестов > 0 Тогда
		ВызватьИсключение Символы.ПС+"При тестировании разных сеансов пользователей упали тесты <"+ОбщееКоличествоУпавшихТестов+" шт.>:"+Символы.ПС+
			ОбщаяСтрокаОписанияУпавшихТестов;
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьПользователяИБ_ЕслиОнСуществует(лИмяПользователя) Экспорт

	лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(лИмяПользователя);
	Если лПользователь <> Неопределено Тогда
		лПользователь.Удалить();
	КонецЕсли;

КонецПроцедуры

Функция СоздатьТестовыеДанные(ИмяМакета) Экспорт	
	Макет = ЗаполнитьТестовыйМакет(ИмяМакета);
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	Возврат ТестовыеДанные;
КонецФункции

Функция ЗаполнитьТестовыйМакет(ИмяМакета) Экспорт
	ПараметрыМакета = Новый Массив;
	ПараметрыМакета.Добавить(НаборПользователей);
	ПараметрыМакета.Добавить(НаборРолей);
	
	Макет = ПолучитьМакетДанныхДоступа(ИмяМакета, ПараметрыМакета);
	Возврат Макет;
КонецФункции

// { обработчики событий xUnitFor1C

Процедура ВывестиСообщение(Сообщение) Экспорт
	Префикс	= "";
	Если ТекущийПользователь <> Неопределено Тогда
		Префикс = "Сообщение от сеанса <"+ТекущийПользователь.Имя + "> : ";
	КонецЕсли;
	Сообщить(Префикс + Сообщение);
КонецПроцедуры

Процедура TestLoaded(Параметр) Экспорт
	Если ТекущийПользователь <> Неопределено Тогда
		Параметр.Имя = "<"+ТекущийПользователь.Имя + "> : " + Параметр.Имя; // +", путь <"+Параметр.ПолныйПуть+">";
	КонецЕсли;
	КоличествоЗагруженныхТестов = КоличествоЗагруженныхТестов + 1;
	//Сообщить("TestLoaded " +Параметр.Имя);
КонецПроцедуры

Процедура TestFailed(Параметр) Экспорт
	//Сообщить("TestFailed " +Параметр.Имя);
	УпавшиеТесты.Добавить(Параметр);
КонецПроцедуры

// }

Функция КаталогЗапускателяТестов()
	Если ЮТест.ЭтоВнешняяОбработка() Тогда
		КаталогЗапускателяТестов = Новый Файл(ЮТест.ИспользуемоеИмяФайла);
	Иначе
		Файл = Новый Файл(ЭтотОбъект.ИспользуемоеИмяФайла);
		КаталогЗапускателяТестов = Новый Файл(Файл.Путь+"\..");
	КонецЕсли;
	Возврат КаталогЗапускателяТестов.Путь;
КонецФункции

Функция ПолноеИмяВнешнейОбработкиДляЗапускаТестовЧерезКоманднуюСтрокуПредприятия()
	Если ЮТест.ЭтоВнешняяОбработка() Тогда
		ПутьФайла = ЮТест.ИспользуемоеИмяФайла;
	Иначе
		ПутьФайла = КаталогЗапускателяТестов() + "xddScriptRunner.epf";
	КонецЕсли;
	Возврат ПутьФайла;
КонецФункции

Функция ИмяЗапускателяТестов()
	Возврат "xddTestRunner";
КонецФункции

Функция ПолучитьМакетДанныхДоступа(ИмяМакета, КоллекцияПараметров) Экспорт

	Макет = ПолучитьМакет(ИмяМакета);
	Для каждого Структура Из КоллекцияПараметров Цикл
		ЗаполнитьЗначенияСвойств(Макет.Параметры, Структура);
	КонецЦикла;
	
	НовыйТабДок = Новый ТабличныйДокумент;
	НовыйТабДок.Вывести(Макет);

	Возврат НовыйТабДок;
КонецФункции
