&НаКлиенте
Перем	Коллекция_ДанныхАвтоОбъектовПриложения1С;

&НаКлиенте
Перем	УпавшиеТесты;

&НаКлиенте
Перем	ТекущийПользователь;

&НаКлиенте
Перем юТест;  // для тестирования

//{ основная процедура для юнит-тестирования 1CUnit
&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	ПутьКаталогаЗапускателяТестов = СтрЗаменить(ЮТест.ИспользуемоеИмяФайла, ИмяЗапускателяТестов() + ".epf", "");
	ДополнитьСписокТестовСервер(ВсеТесты, ПутьКаталогаЗапускателяТестов);
	
	Возврат ВсеТесты;	
КонецФункции

&НаСервере
Процедура ДополнитьСписокТестовСервер(ВсеТесты, ПутьКаталогаЗапускателяТестов)
	Объект().ДополнитьСписокТестов(ВсеТесты, ПутьКаталогаЗапускателяТестов, "УФ ");
КонецПроцедуры

//}

//{ БЛОК ЮНИТ-ТЕСТОВ - сами тесты

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	УпавшиеТесты = Неопределено;
	КоличествоЗагруженныхТестов = 0;
	Коллекция_ДанныхАвтоОбъектовПриложения1С = Новый Массив;
	
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	//ЮТест.УдалитьСозданныеДанные(ТестовыеДанные);
	УпавшиеТесты = Неопределено;
	Для каждого ДанныеАвтоОбъектаПриложения1С Из Коллекция_ДанныхАвтоОбъектовПриложения1С Цикл
		
		ЗавершитьСеансПользователя(ДанныеАвтоОбъектаПриложения1С.АвтоОбъектПриложения1С, ДанныеАвтоОбъектаПриложения1С.ЗапускательТестов);
		
	КонецЦикла;
	
	Коллекция_ДанныхАвтоОбъектовПриложения1С.Очистить();
	Коллекция_ДанныхАвтоОбъектовПриложения1С = Неопределено;
	ТекущийПользователь = Неопределено;
	ТестовыеДанные = Неопределено;
	КоличествоЗагруженныхТестов = 0;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьСеансПользователя(АвтоОбъектПриложения1С, ЗапускательТестов)
	Если ЗапускательТестов <> Неопределено Тогда
		ЗапускательТестов.SetHandlerObject(Неопределено);
		
		ЗапускательТестов = Неопределено;
	КонецЕсли;
	Если АвтоОбъектПриложения1С <> Неопределено Тогда
		АвтоОбъектПриложения1С.ЗавершитьРаботуСистемы(Ложь);
		АвтоОбъектПриложения1С = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ЗапуститьТестыВОтдельномСеансеПользователяЧерезV82_Application(Настройка) Экспорт
	МассивИменПользователей = Новый Массив;
	МассивИменПользователей.Добавить(ИмяПользователяПоУмолчанию());
	ЗапуститьТестыВОтдельномСеансеПользователя(Настройка, МассивИменПользователей);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ЗапуститьТестыОткрытияФормКонфигурации_ВОтдельномСеансеПользователя(Настройка) Экспорт
	МассивИменПользователей = МассивИменПользователейПоУмолчанию();
	ЗапуститьТестыВОтдельномСеансеПользователя(Настройка, МассивИменПользователей);
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьТестыВОтдельномСеансеПользователя(Настройка, МассивИменПользователей) Экспорт
	СоздатьПользователей(Настройка.ИмяМакета, МассивИменПользователей);
	
	ЗапускатьТолстыйКлиент = Настройка.ЗапускатьТолстыйКлиент;
	ПутьТестов = Настройка.ПутьТестов;
	
	МассивПользователей = Новый Массив();
	Для каждого ИмяПользователя Из МассивИменПользователей Цикл
		МассивПользователей.Добавить(Новый Структура("Имя", ИмяПользователя));
	КонецЦикла;
	
	ДанныеТестовПоПользователям = Новый Соответствие;
	Для каждого ТекущийПользователь Из МассивПользователей Цикл
	
		ДанныеТестирования = ВыполнитьТестыДляПользователяВОтдельномСеансе(ТекущийПользователь, ПутьТестов, ЗапускатьТолстыйКлиент);
		МассивУпавшихТестов = ДанныеТестирования.МассивУпавшихТестов;
		
		Если ДанныеТестирования.КоличествоЗагруженныхТестов <> 0 И МассивУпавшихТестов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ДанныеТестовПоПользователям.Вставить(ТекущийПользователь, ДанныеТестирования);
	КонецЦикла;
	
	ПроверитьПрохождениеТестов(ДанныеТестовПоПользователям);
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьТестыДляПользователяВОтдельномСеансе(ТекущийПользователь, ПутьТестов, ТолстыйКлиент = Истина)
	//Если Не ТолстыйКлиент Тогда
	//	ВызватьИсключение "В режиме Automation тонкого клиента нельзя использовать ВнешниеОбработки. Код AutomationObj.ExternalDataProcessors.Create(ПутьФайла) выдает исключение.";
	//КонецЕсли;
	
	УпавшиеТесты = Новый Массив();
	КоличествоЗагруженныхТестов = 0;
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
		
	СтрокаСоединения = СтрокаСоединения + "Usr=""" + ТекущийПользователь.Имя + """;Pwd=;";
		
	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПриложения = СисИнфо.ВерсияПриложения;
	ИдАвтоОбъектаПриложения1С = "";
	Если Лев(ВерсияПриложения, 3) = "8.2" Тогда
		ИдАвтоОбъектаПриложения1С = "V82";
	ИначеЕсли Лев(ВерсияПриложения, 3) = "8.3" Тогда
		ИдАвтоОбъектаПриложения1С = "V83";
	ИначеЕсли Лев(ВерсияПриложения, 3) = "8.4" Тогда
		ИдАвтоОбъектаПриложения1С = "V84";
	Иначе
		ВызватьИсключение "Версию приложению <"+ВерсияПриложения+"> обрабатывать не умеем";
	КонецЕсли;

	Если Не ТолстыйКлиент Тогда
		ИдАвтоОбъектаПриложения1С = ИдАвтоОбъектаПриложения1С + "C";
	КонецЕсли;
	
	ИдАвтоОбъектаПриложения1С = ИдАвтоОбъектаПриложения1С + ".Application";
	
	АвтоОбъектПриложения1С = new COMObject(ИдАвтоОбъектаПриложения1С);
	
	Успешно = АвтоОбъектПриложения1С.connect(СтрокаСоединения);
		ЮТест.Проверить(Успешно, "АвтоОбъектПриложения1С.connect(СтрокаСоединения)");
	АвтоОбъектПриложения1С.Visible = true;
	
	ДанныеАвтоОбъектовПриложения1С = Новый Структура("АвтоОбъектПриложения1С,ЗапускательТестов", АвтоОбъектПриложения1С, Неопределено);
	Коллекция_ДанныхАвтоОбъектовПриложения1С.Добавить(ДанныеАвтоОбъектовПриложения1С);
	
	ИспользуемоеИмяФайлаЗапускателяТестов = ЮТест.ИспользуемоеИмяФайла;
	
	Если ТолстыйКлиент Тогда
		ЗапускательТестов = АвтоОбъектПриложения1С.ВнешниеОбработки.Создать(ИспользуемоеИмяФайлаЗапускателяТестов, Ложь);
		
		ЗапускательТестов.ЗапретИспользованияИнформатора = Истина;
		ЗапускательТестов.SetHandlerObject(ЭтаФорма);
		ЗапускательТестов.OpenBrowserForm();
		
		ЗапускательТестов.LoadAllTests(ПутьТестов);
	Иначе
		НашлиОбщийМодуль = Истина;
		Попытка
			xddМодуль = АвтоОбъектПриложения1С.xddКлиент;
		Исключение
			НашлиОбщийМодуль = Ложь;
		КонецПопытки;
			ЮТест.Проверить(НашлиОбщийМодуль, "Для запусков тестов пользователей в тонком клиенте требуется общий модуль xddКлиент");
	
		ИдОбработки_юТест = ИмяЗапускателяТестов();
		ЗапускательТестов = xddМодуль.ПодключитьНаСервереВнешнююОбработкуОтКлиента(ИспользуемоеИмяФайлаЗапускателяТестов, ИдОбработки_юТест);
		
		ЗапускательТестов = АвтоОбъектПриложения1С.ПолучитьФорму("ВнешняяОбработка."+ИдОбработки_юТест+".Форма.УправляемаяФорма");
		
		ЗапускательТестов.Пути.Очистить();
		ЗапускательТестов.Пути.Добавить(ПутьТестов);
		
		ЗапускательТестов.ЗапретИспользованияИнформатора = Истина;
		ЗапускательТестов.SetHandlerObject(ЭтаФорма);
		ЗапускательТестов.OpenBrowserForm(); //ЗапускательТестов.Открыть();
		
		//ЗапускательТестов.LoadAllTests(ПутьТестов);

	КонецЕсли;
	ДанныеАвтоОбъектовПриложения1С.Вставить("ЗапускательТестов", ЗапускательТестов);
	
	Если КоличествоЗагруженныхТестов <> 0 Тогда
		ЗапускательТестов.RunAllTests();
	КонецЕсли;
	
	Рез = Новый Структура("МассивУпавшихТестов,КоличествоЗагруженныхТестов", УпавшиеТесты, КоличествоЗагруженныхТестов);
	УпавшиеТесты = Неопределено; // чтоб освободить глобальную переменную
	КоличествоЗагруженныхТестов = 0;
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура СоздатьПользователей(ИмяМакета, МассивИменПользователей)
	Макет = ПодготовитьсяКСозданиюПользователейСервер(ИмяМакета, МассивИменПользователей);
	юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
КонецПроцедуры

Функция ПодготовитьсяКСозданиюПользователейСервер(ИмяМакета, МассивИменПользователей)
	НаборРолей = Объект().СоздатьНаборРолей();
	СтрокаОшибок = "";
	Если Не ПроверитьНаличиеРолейСервер(НаборРолей, СтрокаОшибок) Тогда
		ВызватьИсключение "Тест не будет работать в текущей конфигурации"+Символы.ПС+СтрокаОшибок;
	КонецЕсли;
		
	Для каждого ИмяПользователя Из МассивИменПользователей Цикл
		УдалитьПользователяИБ_ЕслиОнСуществуетСервер(ИмяПользователя);
	КонецЦикла;
	
	Объект.НаборРолей = НаборРолей;
	Объект.НаборПользователей = Объект().СоздатьНаборПользователей();
	Макет = Объект().ЗаполнитьТестовыйМакет(ИмяМакета);
	Возврат Макет;
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьНаличиеРолейСервер(НаборРолей, СтрокаОшибок)
	СтрокаОшибок = "";
	Для каждого КлючЗначение Из НаборРолей Цикл
		ИмяРоли = КлючЗначение.Значение;
		Если Метаданные.Роли.Найти(ИмяРоли) = Неопределено Тогда
			СтрокаОшибок = СтрокаОшибок + "В метаданных нет роли <"+ИмяРоли+">";
		КонецЕсли;
	КонецЦикла;
	Возврат Не ЗначениеЗаполнено(СтрокаОшибок);
КонецФункции

// { обработчики событий xUnitFor1C

&НаКлиенте
Процедура ВывестиСообщение(Сообщение) Экспорт
	Префикс	= "";
	Если ТекущийПользователь <> Неопределено Тогда
		Префикс = "Сообщение от сеанса <"+ТекущийПользователь.Имя + "> : ";
	КонецЕсли;
	Сообщить(Префикс + Сообщение);
КонецПроцедуры

&НаКлиенте
Процедура TestLoaded(Параметр) Экспорт
	//Сообщить("TestLoaded " +Параметр.Имя);
	Если ТекущийПользователь <> Неопределено Тогда
		Параметр.Имя = "<"+ТекущийПользователь.Имя + "> : " + Параметр.Имя; // +", путь <"+Параметр.ПолныйПуть+">";
	КонецЕсли;
	КоличествоЗагруженныхТестов = КоличествоЗагруженныхТестов + 1;
	//Сообщить("TestLoaded " +Параметр.Имя);
КонецПроцедуры

&НаКлиенте
Процедура TestFailed(Параметр) Экспорт
	//Сообщить("TestFailed " +Параметр.Имя);
	УпавшиеТесты.Добавить(Параметр);
КонецПроцедуры

// }

&НаКлиенте
Процедура ПроверитьПрохождениеТестов(ДанныеТестовПоПользователям)
	ОбщаяСтрокаОписанияУпавшихТестов = ""+Символы.ПС;
	ОбщееКоличествоУпавшихТестов = 0;
	ОбщееКоличествоПользователейУКоторыхНеЗагрузилисьТесты = 0;
	Для каждого КлючЗначение Из ДанныеТестовПоПользователям Цикл
		ТекущийПользователь = КлючЗначение.Ключ;
		//Сообщить(ТекущийПользователь);
		
		ДанныеТестирования = КлючЗначение.Значение;
		МассивУпавшихТестов = ДанныеТестирования.МассивУпавшихТестов;
			ЮТест.ПроверитьТип(МассивУпавшихТестов, "Массив", "Пользователь <"+ТекущийПользователь.Имя + ": МассивУпавшихТестов");
			
		СтрокаОписанияУпавшихТестов = ""+Символы.ПС;
		
		КоличествоЗагруженныхТестов = ДанныеТестирования.КоличествоЗагруженныхТестов;
		Если КоличествоЗагруженныхТестов = 0 Тогда
			ОбщееКоличествоПользователейУКоторыхНеЗагрузилисьТесты = ОбщееКоличествоПользователейУКоторыхНеЗагрузилисьТесты + 1;
			ОбщаяСтрокаОписанияУпавшихТестов = ОбщаяСтрокаОписанияУпавшихТестов + "У пользователя <"+ТекущийПользователь.Имя + "> не загрузились тесты!"+
				СтрокаОписанияУпавшихТестов;
				Продолжить;
		КонецЕсли;

		ОбщееКоличествоУпавшихТестов = ОбщееКоличествоУпавшихТестов + МассивУпавшихТестов.Количество();
		Для каждого СтрокаДереваТестов Из МассивУпавшихТестов Цикл
			СтрокаОписанияУпавшихТестов = СтрокаОписанияУпавшихТестов + " "+
				//"<"+ТекущийПользователь.Имя + "> : " + СтрокаДереваТестов.Имя +", путь <"+
				": <" + СтрокаДереваТестов.Имя +">, путь <"+
				СтрокаДереваТестов.ПолныйПуть+">" +Символы.ПС;
		КонецЦикла;
		ОбщаяСтрокаОписанияУпавшихТестов = ОбщаяСтрокаОписанияУпавшихТестов + "У пользователя <"+ТекущийПользователь.Имя + "> упали тесты < "+МассивУпавшихТестов.Количество()+" шт.>:"+
			СтрокаОписанияУпавшихТестов;
	КонецЦикла;
	//Если ОбщееКоличествоПользователейУКоторыхНеЗагрузилисьТесты > 0 Тогда
	//	ВызватьИсключение Символы.ПС+"При тестировании разных сеансов пользователей вообще не удалось загрузить тесты. Всего <"+ОбщееКоличествоПользователейУКоторыхНеЗагрузилисьТесты+" пользователей>:"+Символы.ПС+
	//		ОбщаяСтрокаОписанияУпавшихТестов;
	//КонецЕсли;
	Если ОбщееКоличествоУпавшихТестов > 0 Тогда
		ВызватьИсключение Символы.ПС+"При тестировании разных сеансов пользователей упали тесты <"+ОбщееКоличествоУпавшихТестов+" шт.>:"+Символы.ПС+
			ОбщаяСтрокаОписанияУпавшихТестов;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УдалитьПользователяИБ_ЕслиОнСуществуетСервер(лИмяПользователя)
	Объект().УдалитьПользователяИБ_ЕслиОнСуществует(лИмяПользователя);
КонецПроцедуры

&НаСервере
Функция Объект()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиенте
Функция ИмяПользователяПоУмолчанию()
	Возврат "ТестИмя"; // должно совпадать с макетом;
КонецФункции

&НаКлиенте
Функция МассивИменПользователейПоУмолчанию()
	Рез = Новый Массив();
	Рез.Добавить(ИмяПользователяПоУмолчанию());
	Рез.Добавить("ТестИмя2");// должно совпадать с макетом;
	Возврат Рез;
КонецФункции

&НаКлиенте
Функция ИмяЗапускателяТестов()
	Возврат "xddTestRunner";
КонецФункции

//} КОНЕЦ БЛОКА ЮНИТ-ТЕСТОВ
