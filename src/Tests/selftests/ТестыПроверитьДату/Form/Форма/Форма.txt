
//{ основная процедура для юнит-тестирования xUnitFor1C
&НаКлиенте
Перем ЮТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;

	ВсеТесты.Добавить("ТестДолжен_ПроверитьВхождениеДатыВПериод");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьДатыОтличающиеНа1Секунду");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьДатыОтличающиеНа2Секунды");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьДатыОтличающиеНа3Секунды");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРазныеДаты");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьОдинаковыеДаты");

	Возврат ВсеТесты;
	
КонецФункции
//}

//{ блок юнит-тестов - сами тесты

&НаКлиенте
Процедура ТестДолжен_ПроверитьВхождениеДатыВПериод() Экспорт
	Дата = '20101201235426';	
	Период = Новый СтандартныйПериод(НачалоМинуты(Дата), КонецМинуты(Дата));
	ЮТест.ПроверитьДату(Дата, Период, "Дата должна находиться в периоде, а это не выполнено!");
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьДатыОтличающиеНа1Секунду() Экспорт
	Дата = '20101201235426';	
	Дата2 = '20101201235426'-1;	
	ЮТест.ПроверитьРавенствоДатСТочностью2Секунды(Дата, Дата2, "Даты должны считаться одинаковыми, а это не выполнено!");
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьДатыОтличающиеНа2Секунды() Экспорт
	Дата = '20101201235426';	
	Дата2 = '20101201235426'-2;	
	ЮТест.ПроверитьРавенствоДатСТочностью2Секунды(Дата, Дата2, "Даты должны считаться одинаковыми, а это не выполнено!");
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьДатыОтличающиеНа3Секунды() Экспорт
	Дата = '20101201235426';	
	Дата2 = '20101201235426'-3;	
	ОжидаемоеОписаниеОшибки = "Даты должны считаться разными, а это не выполнено!";
	
	ПроверитьРавенствоДатСТочностью2Секунды(Дата, Дата2, ОжидаемоеОписаниеОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРазныеДаты() Экспорт
	Дата = '20101201235426';	
	Дата2 = ТекущаяДата();	
	ОжидаемоеОписаниеОшибки = "Даты должны считаться разными, а это не выполнено!";
	
	ПроверитьРавенствоДатСТочностью2Секунды(Дата, Дата2, ОжидаемоеОписаниеОшибки);	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРавенствоДатСТочностью2Секунды(Дата, Дата2, ОжидаемоеОписаниеОшибки)
	БылоИсключение = Ложь;
	Попытка
		ЮТест.ПроверитьРавенствоДатСТочностью2Секунды(Дата, Дата2, ОжидаемоеОписаниеОшибки);
	Исключение
		БылоИсключение = Истина;
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
		
	Если НЕ БылоИсключение ИЛИ Найти(ПолученноеОписаниеОшибки, ОжидаемоеОписаниеОшибки) = 0 Тогда
		ВызватьИсключение ОжидаемоеОписаниеОшибки+Символы.ПС+ПолученноеОписаниеОшибки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьОдинаковыеДаты() Экспорт
	Дата = '20101201235426';	
	Дата2 = '20101201235426';	
	ЮТест.ПроверитьРавенствоДатСТочностью2Секунды(Дата, Дата2, "Даты должны считаться одинаковыми, а это не выполнено!");
КонецПроцедуры

//} 